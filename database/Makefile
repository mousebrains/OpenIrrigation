#
# Install scripts into appropriate directories for a Raspbian Stretch system
# with a user/group
#

include ../Makefile.params

SQL = db.schema.sql
SQL+= db.funcs.sql
SQL+= db.list.sql
SQL+= db.params.sql
SQL+= db.ET.sql
SQL+= db.soil.sql
SQL+= db.crop.sql

.PHONY: all install clean freshdb mkRoles dropRoles mkdb dropdb createdb dumpdb mkSite

all: clean freshdb

install:

clean:
	rm -f .drop.role.sql .make.role.sql .make.tables.sql

freshdb: dropdb dropRoles mkRoles createdb mkdb

mkRoles: .make.role.sql
	@ echo Creating roles
	@ sudo -u postgres psql --quiet --file=$<

dropRoles: .drop.role.sql
	@ echo Dropping roles
	@ sudo -u postgres psql --quiet --file=$<

.drop.role.sql:
	@ echo Creating $@
	@ echo "-- This file automatically generated by $(MAKE)" >$@
	@ echo "SET client_min_messages=WARNING;" >>$@ 
	@ for i in $(ROLES); do echo "DROP ROLE IF EXISTS $$i;" >>$@; done
	@ echo "DROP ROLE IF EXISTS $(PARENTROLE);" >>$@

.make.role.sql:
	@ echo Creating $@
	@ echo "-- This file automatically generated by $(MAKE)" >$@
	@ echo "SET client_min_messages=WARNING;" >>$@ 
	@ echo "CREATE ROLE $(PARENTROLE) NOSUPERUSER CREATEDB NOCREATEROLE NOINHERIT NOLOGIN;" >>$@
	@ for i in $(ROLES); do echo "CREATE ROLE $$i IN ROLE $(PARENTROLE) LOGIN INHERIT;" >>$@; done


mkdb: .make.tables.sql
	@ echo Loading schema into $(DBNAME)
	@ psql --quiet --file=$< $(DBNAME)
	
.make.tables.sql: $(SQL)
	@ echo Creating $@
	@ echo "-- This file automatically generated by $(MAKE)" >$@
	@ echo "SET client_min_messages=WARNING;" >>$@ 
	@ echo "BEGIN;" >> $@
	@ for i in $+; do echo "\\include $$i" >>$@; done
	@ echo "REASSIGN OWNED BY CURRENT_USER TO $(PARENTROLE);" >>$@
	@ echo "END;" >> $@

dropdb:
	@ echo Dropping database $(DBNAME)
	@ sudo -u postgres psql  --quiet \
		--command "SET client_min_messages=WARNING;" \
		--command "DROP DATABASE IF EXISTS $(DBNAME);"

createdb: mkRoles
	@ echo Creating database $(DBNAME)
	@ sudo -u postgres psql --quiet \
		--command "SET client_min_messages=WARNING;" \
		--command "CREATE DATABASE $(DBNAME) OWNER $(PARENTROLE);" \
		--command "COMMENT ON DATABASE $(DBNAME) IS 'Irrigation database';"

dumpdb:
	mkdir -p dump.$(DBNAME)
	pg_dump --format=directory --compress=9 --file=dump.$(DBNAME) --dbname=$(DBNAME)
