--
-- Paramters for different modules
--
-- Nov-2016, Pat Welch, pat@mousebrains.com
--
-- The following three lines are for use in sqlite3 command line interface
--
-- .headers on
-- .echo off
-- .timer off

PRAGMA journal_mode = WALL;
PRAGMA synchronous = FULL;
PRAGMA foreign_keys = ON;

-- Interface parameters
DROP TABLE IF EXISTS params;
CREATE TABLE params(grp TEXT, -- name of group this parameter belongs to
                    name TEXT, -- name of parameter
                    val TEXT, -- value of parameter
                    PRIMARY KEY (grp, name) ON CONFLICT REPLACE -- combination must be unique
                   );
DROP INDEX IF EXISTS paramsGroup;
CREATE INDEX paramsGroup ON params (grp);

-- Soil types
DROP TABLE IF EXISTS soil;
CREATE TABLE soil(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                  name TEXT UNIQUE, -- name of the soil, clay, ...
                  paw REAL, -- plant available water mm/m
                  infiltration REAL, -- mm/hour
                  infiltrationSlope REAL, -- mm/hour/% change as a function of slope
                  rootNorm REAL DEFAULT 1 -- multiple crop root depth by this value
                 );

-- All Crops
-- source: http://www.kimberly.uidaho.edu/water/fao56/fao56.pdf
DROP TABLE IF EXISTS crop;
CREATE TABLE crop(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                  name TEXT UNIQUE, -- name of the crop
                  plantDate text, -- roughly when plantted
                  Lini INTEGER, -- days of initial stage
                  Ldev INTEGER, -- days of development stage
                  Lmid INTEGER, -- days of mid-season stage
                  Llate INTEGER, -- days of final stage
                  KcInit REAL, -- Kc initial
                  KcMid REAL, -- Kc mid
                  KcEnd REAL, -- Kc at end
                  height REAL, -- height of plant (m)
                  depth REAL, -- root depth (m)
                  MAD REAL, -- maximum allowed depletion without stress at 5mm/day ETc
                  comment TEXT -- Comment on coefficients
                 );

-- All user accounts
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                  name TEXT UNIQUE, -- Name of the user to use when displaying
                  passwd TEXT -- Hashed password 
                 );

-- All email addresses
DROP TABLE IF EXISTS email;
CREATE TABLE email(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                   user INTEGER REFERENCES user(id) ON DELETE CASCADE, -- user association 
                   email TEXT UNIQUE, -- email address
                   qSMS INTEGER DEFAULT 0, -- format for SMS
                   qHTML INTEGER DEFAULT 1 -- format for HTML
                  );

-- report/alert categories
DROP TABLE IF EXISTS reports;
CREATE TABLE reports(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                     name TEXT UNIQUE, -- short name of the report
                     label TEXT -- descriptive label
                    );

-- Which reports to send to which emails
DROP TABLE IF EXISTS emailReports;
CREATE TABLE emailReports(email INTEGER REFERENCES email(id) ON DELETE CASCADE, -- email id
                          report INTEGER REFERENCES reports(id) ON DELETE CASCADE -- which report
                         );

-- Site information
DROP TABLE IF EXISTS site;
CREATE TABLE site(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                  name TEXT UNIQUE, -- descriptive name 
                  addr TEXT, -- street address 
                  timezone TEXT, -- timezone
                  latitude REAL, -- latitude in decimal degrees
                  longitude REAL, -- longitude in decimal degrees
                  elevation REAL -- elevation above MSL in feet
                 );

-- Controler information
DROP TABLE IF EXISTS controller;
CREATE TABLE controller(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                        site INTEGER REFERENCES site(id) ON DELETE CASCADE, -- site's id
                        name TEXT, -- descriptive name
                        latitude REAL, -- latitude in decimal degrees
                        longitude REAL, -- longitude in decimal degrees
                        driver TEXT, -- device driver
                        maxStations INTEGER DEFAULT 1, -- max # of stations on at a time
                        maxCurrent INTEGER DEFAULT 9990, -- max mAmps
                        delay INTEGER DEFAULT 1, -- delay between truning on stations in s
                        make TEXT, -- manufacturer
                        model TEXT, -- model
                        installed INTEGER, -- date installed in UTC
                        notes TEXT, -- Extra information
			UNIQUE (site, name)
                       );

-- Sensor/Valve device type
DROP TABLE IF EXISTS sensorDevType;
CREATE TABLE sensorDevType(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                           name TEXT UNIQUE, -- device name
                           label TEXT UNIQUE -- descriptive label
                          );
INSERT INTO sensorDevType(name, label) VALUES('solenoid', 'Solenoid');
INSERT INTO sensorDevType(name, label) VALUES('flow', 'Flow Sensor');

-- sensors/valves
DROP TABLE IF EXISTS sensor;
CREATE TABLE sensor(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                    controller INTEGER REFERENCES controller(id) ON DELETE CASCADE, -- ctl's id
                    name TEXT, -- descriptive name
                    latitude REAL, -- latitude in decimal degrees
                    longitude REAL, -- longitude in decimal degrees
                    passiveCurrent REAL DEFAULT 0.5, -- current when not activated in mAmps
                    activeCurrent REAL DEFAULT 0.5, -- current when activated in mAmps
                    devType INTEGER REFERENCES sensorDevType(id) ON DELETE SET NULL, -- dev type
                    driver TEXT, -- device driver
                    addr INTEGER, -- device address in controller space
                    make TEXT, -- manufacturer
                    model TEXT, -- model
                    installed INTEGER, -- date installed in UTC
                    notes TEXT, -- Extra information
		    UNIQUE (controller, name) ON CONFLICT REPLACE
                   );

-- Point of connect
DROP TABLE IF EXISTS poc;
CREATE TABLE poc(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                 site INTEGER REFERENCES site(id) ON DELETE CASCADE, -- site's id
                 name TEXT, -- descriptive name
                 targetFlow REAL, -- target flow in GPM
                 maxFlow REAL, -- maximum allowed flow in GPM
                 delayOn INTEGER DEFAULT 0, -- delay between turning on multiple stations
                 delayOff INTEGER DEFAULT 0, -- delay between turning off multiple stations
		 UNIQUE (site, name)
                );

-- Point of connect flow
DROP TABLE IF EXISTS pocFlow;
CREATE TABLE pocFlow(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                     poc INTEGER REFERENCES poc(id) ON DELETE CASCADE, -- poc's id
                     sensor INTEGER REFERENCES sensor(id) ON DELETE CASCADE UNIQUE, -- sensor's id
                     name TEXT, -- descriptive name
                     make TEXT, -- manufacturer
                     model TEXT, -- model
                     toHertz REAL DEFAULT 1, -- reading to Hertz
                     K REAL DEFAULT 1, -- Hertz -> GPM (reading * toHertz + offset) * K 
                     offset REAL DEFAULT 1, -- offset of Hertz
		     UNIQUE (poc, name)
                    );

-- Point of connect master valve
DROP TABLE IF EXISTS pocMV;
CREATE TABLE pocMV(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                   poc INTEGER REFERENCES poc(id) ON DELETE CASCADE, -- poc's id
                   sensor INTEGER REFERENCES sensor(id) ON DELETE CASCADE UNIQUE, -- sensor's id
                   name TEXT, -- descriptive name
                   make TEXT, -- manufacturer
                   model TEXT, -- model
                   qNormallyOpen INTEGER DEFAULT 1, -- 0->NC, 1->NO
		   UNIQUE (poc, name)
                  );
                  
-- Point of connect pump
DROP TABLE IF EXISTS pocPump;
CREATE TABLE pocPump(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                     poc INTEGER REFERENCES poc(id) ON DELETE CASCADE, -- poc's id
                     sensor INTEGER REFERENCES sensor(id) ON DELETE CASCADE UNIQUE, -- sensor's id
                     name TEXT, -- descriptive name
                     make TEXT, -- manufacturer
                     model TEXT, -- model
                     minFlow REAL, -- minimum flow before turning on this pump
                     maxFlow REAL, -- maximum flow this pump can sustain
                     delayOn INTEGER, -- # of seconds to turn on before using
                     delayOff INTEGER, -- # of seconds to turn off before not needed
                     priority INTEGER DEFAULT 0, -- Order to turn on, 0->first, ...
		     UNIQUE (poc, name)
                    );

-- Station 
DROP TABLE IF EXISTS station;
CREATE TABLE station(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                     poc INTEGER REFERENCES poc(id) ON DELETE CASCADE, -- poc's id
                     sensor INTEGER REFERENCES sensor(id) ON DELETE CASCADE UNIQUE, -- sensor's id
                     name TEXT, -- descriptive name
                     station INTEGER DEFAULT id, -- user visible station number
                     make TEXT, -- manufacturer
                     model TEXT, -- model
                     sortOrder INTEGER, -- display sorting order
                     cycleTime INTEGER, -- maximum cycle time in sec
                     soakTime INTEGER, -- minimum soak time in sec
		     measuredFlow REAL, -- measured flow in GPM
		     userFlow REAL, -- user input in GPM
                     lowFlowFrac REAL DEFAULT 0, -- frac of meas/user flow for alert
                     highFlowFrac REAL DEFAULT 3, -- frac of meas/user flow for alert
                     onDelay INTEGER DEFAULT 60, -- delay after on before flow alerts
                     offDelay INTEGER DEFAULT 60, -- delay after off before flow alerts
		     UNIQUE (poc, name),
		     UNIQUE (poc, station)
		    );

-- Modes for program
DROP TABLE IF EXISTS programMode;
CREATE TABLE programMode(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                         name TEXT UNIQUE, -- Descriptive name
                         label TEXT -- Descriptive name
                        );
INSERT INTO programMode (name,label) VALUES ('off', 'Off');
INSERT INTO programMode (name,label) VALUES ('on', 'On non-ET');
-- INSERT INTO programMode (name,label) VALUES ('ET', 'On ET');

-- progams, a collection of water events
DROP TABLE IF EXISTS program;
CREATE TABLE program(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                     site INTEGER REFERENCES site(id) ON DELETE CASCADE, -- site's id
                     mode INTEGER REFERENCES programMode(id) ON DELETE SET NULL,
                     name TEXT, -- descriptive name
                     maxStations INTEGER, -- max # simultaneous stations
                     maxFlow REAL, -- max flow target flow
		     UNIQUE (site, name)
                    );	

-- stations in each program
DROP TABLE IF EXISTS programStation;
CREATE TABLE programStation(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                            pgm REFERENCES program(id) ON DELETE CASCADE, -- program's id
                            stn REFERENCES station(id) ON DELETE CASCADE, -- station's id
                            mode INTEGER REFERENCES programMode(id) ON DELETE SET NULL,
                            runTime INTEGER DEFAULT 0, -- total runtime in sec
                            priority INTEGER DEFAULT 0, -- run priority
                            UNIQUE (pgm, stn) -- one station/program pair
                           );
-- Modes for events
DROP TABLE IF EXISTS eventMode;
CREATE TABLE eventMode(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                       name TEXT UNIQUE, -- short name
                       label TEXT UNIQUE -- Descriptive name
                      );
INSERT INTO eventMode (name,label) VALUES('water', 'Watering event');
INSERT INTO eventMode (name,label) VALUES('event', 'Non-Water event');

-- Event actions
DROP TABLE IF EXISTS eventAction;
CREATE TABLE eventAction(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                         name TEXT UNIQUE, -- short name
                         label TEXT UNIQUE -- Descriptive name
                        );
INSERT INTO eventAction (name,label) VALUES('dow', 'Day(s) of week');
INSERT INTO eventAction (name,label) VALUES('nDays', 'Every n days');
-- INSERT INTO eventAction (name,label) VALUES('dom', 'Day(s) of month');

-- Event celestial
DROP TABLE IF EXISTS eventCelestial;
CREATE TABLE eventCelestial(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                            name TEXT UNIQUE, -- short name
                            label TEXT UNIQUE -- Descriptive name
                           );
INSERT INTO eventCelestial (name,label) VALUES('clock', 'Wall Clock');
INSERT INTO eventCelestial (name,label) VALUES('sunrise', 'Sunrise');
INSERT INTO eventCelestial (name,label) VALUES('sunset', 'Sunset');

-- Event days of week
DROP TABLE IF EXISTS eventDaysOfWeek;
CREATE TABLE eventDaysOfWeek(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                             name TEXT UNIQUE, -- short name
                             label TEXT UNQUE -- Descriptive name
                            );
INSERT INTO eventDaysOfWeek (name,label) VALUES('sun', 'Sunday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('mon', 'Monday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('tue', 'Tuesday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('wed', 'Wednesday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('thur', 'Thursday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('fri', 'Friday');
INSERT INTO eventDaysOfWeek (name,label) VALUES('sat', 'Saturday');

-- event specifier
DROP TABLE IF EXISTS event;
CREATE TABLE event(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                   site INTEGER REFERENCES site(id) ON DELETE CASCADE, -- site's id
                   name TEXT, -- descriptive name
                   mode INTEGER REFERENCES eventMode(id) ON DELETE SET NULL, -- water, non-water...
                   action INTEGER REFERENCES eventAction(id) ON DELETE SET NULL, -- action 
                   val INTEGER, -- value to be used with action,
                                -- For dow see eventDaysOfWeek for bitmask
                   refDate INTEGER, -- reference date for action
                   startTime INTEGER, -- seconds into day to start
                   duration INTEGER, -- duration of window in seconds
                   startMode INTEGER REFERENCES eventCelestial(id) ON DELETE SET NULL, -- starting
                   stopMode INTEGER REFERENCES eventCelestial(id) ON DELETE SET NULL, -- stoping
		   UNIQUE(site, name)
                  );

-- water windows
DROP TABLE IF EXISTS programEvent;
CREATE TABLE programEvent(id INTEGER PRIMARY KEY AUTOINCREMENT, -- id
                          pgm REFERENCES program(id) ON DELETE CASCADE, -- program's id
                          event REFERENCES event(id) ON DELETE CASCADE, -- event's id
                          attractorFrac REAL DEFAULT 0, -- fraction to gravitate towards [0,1]
                          priority INTEGER DEFAULT 0, -- sort order for windows within a program
                          UNIQUE (pgm,event) -- Only one entry per event/program combination
                         );

-- .schema
